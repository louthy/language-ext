{
  "version": "1.9.1",
  "authors": [ "Paul Louth" ],
  "description": "Helper library for LanguageExt.Core that facilitates conversion between F# native types like Option, Map, List, etc to .NET and Language Ext types.",
  "copyright": "Copyright (c) Paul Louth",

  "packOptions": {
    "title": "LanguageExt.FSharp",
    "owners": [ "paullouth" ],
    "tags": [ "C#", "Functional", "Language Extension", "Monad", "Option", "Either", "Reader", "Writer", "State", "List", "Set", "Map", "Queue", "Memo", "Memoization", "Immutable", "Lambda", "Pattern Matching", "Tuple", "Actor", "Process", "Akka", "Redis" ],
    "iconUrl": "https://camo.githubusercontent.com/08525ae465a9061150679d871731e77b399c2a94/687474703a2f2f7777772e34666f75722e6f72672f696d616765732f6c616e672d6578742d6c6f676f2e706e67",
    "summary": "Lst<T> - Immutable list\nMap<K,V> - Immutable map\nSet<T> - Immutable set\nQue<T> - Immutable queue\nStck<T> - Immutable stack\nOption<T>\nOptionUnsafe<T> - Option monad that can be used with null values\nEither<L,R>\nEitherUnsafe<L,R> - Right/Left choice monad that can be used with null values\nTry<T> - Exception catching monad\nTryOption<T> - Option monad with third state 'Fail' that catches exceptions\nReader<E,T> - Reader monad\nWriter<O,T> - Writer monad\nState<S,T> - State monad\nRws<E,O,S,T> - Reader/Writer/State monad\nMonad transformers - A higher kinded type (ish)\nProcess library - Actor system. The same as Erlang processes for massive concurrency with state management.\nRedis persistence - Persistence of the Process system message-queues and state, for robustness and inter-app communication.\nCurrying - Partial application - Memoization - Improved lambda type inference - var add = fun( (int x, int y) => x + y)\nIObservable<T> extensions\nBifunctors\nBitraversables\nBifoldables",
    "releaseNotes": "",
    "projectUrl": "https://github.com/louthy/language-ext",
    "licenseUrl": "https://github.com/louthy/language-ext/blob/master/LICENSE.md"
  },

  "configurations": {
    "Debug": {
      "buildOptions": {
        "define": [ "DEBUG", "TRACE" ],
        "compile": "*.cs"
      }
    },
    "Release": {
      "buildOptions": {
        "define": [ "RELEASE", "TRACE" ],
        "optimize": true,
        "compile": "*.cs"
      }
    }
  },
  "dependencies": {
    "LanguageExt.Core": {
      "version": "1.9.1",
      "target": "project"
    }
  },
  "frameworks": {
    "net45": {
      "dependencies": {
        "FSharp.Core": "4.0.0.1"
      }
    },
    "net46": {
      "dependencies": {
        "FSharp.Core": "4.0.0.1"
      }
    },
    "netstandard16": {
      "dependencies": {
        "Microsoft.FSharp.Core.netcore": "1.0.0-*",
        "System.Collections": "4.0.11"
      }
    }
  }
}