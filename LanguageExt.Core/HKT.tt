<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# 
    var types = new [] {
        T("IEnumerable", "!T",                  "self.FirstOrDefault()",                          DelType.Not, "List"),
        T("Option",      "!T",                  "self.IsSome ? self.Value : default(T)",          DelType.Not),
        T("OptionUnsafe","!T",                  "self.IsSome ? self.Value : default(T)",          DelType.Not),
        T("Lst",         "!T",                  "self.FirstOrDefault()",                          DelType.Not, "List"),
        T("Map",         "K, !T",               "self.Values.FirstOrDefault()",                   DelType.Not),
        T("HMap",        "K, !T",               "self.Values.FirstOrDefault()",                   DelType.Not),
        T("TryOption",   "!T",                  "self.Try().Value.IfNone(default(T))",            DelType.Not),
        T("Try",         "!T",                  "self.Try().Value",                               DelType.Not),
        T("Either",      "L, !T",               "self.IsRight ? self.RightValue : default(T)",    DelType.Not),
        T("EitherUnsafe","L, !T",               "self.IsRight ? self.RightValue : default(T)",    DelType.Not),
        T("Reader",      "Env, !T",             "self",                                           DelType.Func1),
        T("Writer",      "Out, !T",             "self",                                           DelType.Func0),
        T("State",       "State, !T",           "self",                                           DelType.Func1),
        T("Rws",         "Env, Out, State, !T", "self",                                           DelType.Func1),
        T("Task",        "!T",					"self.Result",								      DelType.Not),
        //T("Nullable",    "!T",                  "self.HasValue ? self.Value : default(T)",        DelType.Not),
    };


    var sumComments = Summary("Sum");
    var countComments = Summary("Count");
    var bindComments = Summary("Bind");
    var existsComments = Summary("Exists");
    var filterComments = Summary("Filter");
    var foldComments = Summary("Fold");
    var forallComments = Summary("ForAll");
    var iterComments = Summary("Iter");
    var mapComments = Summary("Map");
    var liftComments = Summary("Lift");
    var liftUnsafeComments = Summary("LiftUnsafe");
    var selectManyComments = Summary("SelectMany");
    var selectComments = Summary("Select");
    var whereComments = Summary("Where");

    var monadFuncs = new [] {
        //
        // Value
        //
        Tuple.Create(
            "TABS2 internal static RETURN_ONE_T InnerValue<ARGS_T>(this TYPE self) => VALUE;",
            "",
            "TABS2 internal static RETURN_ONE_T ValueT<ARGS_T>(this TYPE self) => self.MapT(x=> x.InnerValue()).InnerValue();",
            ""),
        //
        // Sum
        //
        Tuple.Create(
            sumComments+"TABS2 [Pure] internal static RETURN_ONE_INT SumT<ARGS_INT>(this TYPE_INT self) => self.Sum();",
            "",
            sumComments+"TABS2 [Pure] public static RETURN_ONE_INT SumT<ARGS_INT>(this TYPE_INT self) => self.MapT(x => x.SumT()).SumT();",
            sumComments+"TABS2 [Pure] public static RETURN_ONE_INT sumT<ARGS_INT>(TYPE_INT self) => self.MapT(x => x.SumT()).SumT();"),
        //
        // Count
        //
        Tuple.Create(
            countComments+"TABS2 [Pure] internal static RETURN_ONE_INT CountT<ARGS_T>(this TYPE self) => self.Count();",
            "",
            countComments+"TABS2 [Pure] public static RETURN_ONE_INT CountT<ARGS_T>(this TYPE self) => self.MapT(x => x.CountT()).SumT();",
            countComments+"TABS2 [Pure] public static RETURN_ONE_INT countT<ARGS_T>(TYPE self) => self.MapT(x => x.CountT()).SumT();"),
        //
        // Bind
        //
        Tuple.Create(
            bindComments+"TABS2 [Pure] internal static RETURN_U BindT<ARGS_TU>(this TYPE self, Func<T, RETURN_U> binder) => self.Bind(binder);",
            "",
            bindComments+"TABS2 [Pure] public static RETURN_U BindT<ARGS_TU>(this TYPE self, Func<T, INNER_U> binder) => self.MapT(x => x.BindT(binder));",
            bindComments+"TABS2 [Pure] public static RETURN_U bindT<ARGS_TU>(TYPE self, Func<T, INNER_U> binder) => self.MapT(x => x.BindT(binder));"),
        //
        // Exists
        //
        Tuple.Create(
            existsComments+"TABS2 [Pure] internal static RETURN_ONE_BOOL ExistsT<ARGS_T>(this TYPE self, Func<T, bool> pred) => self.Exists(pred);",
            "",
            existsComments+"TABS2 [Pure] public static RETURN_ONE_BOOL ExistsT<ARGS_T>(this TYPE self, Func<T, bool> pred) => self.MapT(x => x.ExistsT(pred)).ExistsT(x=>x);",
            existsComments+"TABS2 [Pure] public static RETURN_ONE_BOOL existsT<ARGS_T>(TYPE self, Func<T, bool> pred) => self.MapT(x => x.ExistsT(pred)).ExistsT(x=>x);"),
        //
        // Filter
        //
        Tuple.Create(
            filterComments+"TABS2 [Pure] internal static RETURN_T FilterT<ARGS_T>(this TYPE self, Func<T, bool> pred) => self.Filter(pred);",
            "",
            filterComments+"TABS2 [Pure] public static RETURN_T FilterT<ARGS_T>(this TYPE self, Func<T, bool> pred) => self.MapT(x => x.FilterT(pred));",
            filterComments+"TABS2 [Pure] public static RETURN_T filterT<ARGS_T>(TYPE self, Func<T, bool> pred) => self.MapT(x => x.FilterT(pred));"),
        //
        // Fold
        //
        Tuple.Create(
            foldComments+"TABS2 [Pure] internal static RETURN_ONE_V FoldT<ARGS_T, V>(this TYPE self, V state, Func<V, T, V> fold) => self.Fold(state,fold);",
            "",
            foldComments+"TABS2 [Pure] public static RETURN_ONE_V FoldT<ARGS_T, V>(this TYPE self, V state, Func<V, T, V> fold) =>DEL_ARGS self.FoldT(state,(s,x) => x.FoldT(s, fold)DEL_INVOKE_ONE);",
            foldComments+"TABS2 [Pure] public static RETURN_ONE_V foldT<ARGS_T, V>(TYPE self, V state, Func<V, T, V> fold) =>DEL_ARGS self.FoldT(state,(s,x) => x.FoldT(s, fold)DEL_INVOKE_ONE);"),
        //
        // ForAll
        //
        Tuple.Create(
            forallComments+"TABS2 [Pure] internal static RETURN_ONE_BOOL ForAllT<ARGS_T>(this TYPE self, Func<T, bool> pred) => self.ForAll(pred);",
            "",
            forallComments+"TABS2 [Pure] public static RETURN_ONE_BOOL ForAllT<ARGS_T>(this TYPE self, Func<T, bool> pred) =>DEL_ARGS self.ForAllT(pred)DEL_INVOKE;",
            forallComments+"TABS2 [Pure] public static RETURN_ONE_BOOL forallT<ARGS_T>(TYPE self, Func<T, bool> pred) =>DEL_ARGS self.ForAllT(pred)DEL_INVOKE;"),
        //
        // Iter
        //
        Tuple.Create(
            iterComments+"TABS2 internal static RETURN_ONE_UNIT IterT<ARGS_T>(this TYPE self, Action<T> action) => self.Iter(action);",
            "",
            iterComments+"TABS2 public static RETURN_ONE_UNIT IterT<ARGS_T>(this TYPE self, Action<T> action) =>DEL_ARGS self.IterT(x => x.IterT(action)DEL_INVOKE);",
            iterComments+"TABS2 public static RETURN_ONE_UNIT iterT<ARGS_T>(TYPE self, Action<T> action) =>DEL_ARGS self.IterT(x => x.IterT(action)DEL_INVOKE);"),
        //
        // Map
        //
        Tuple.Create(
            mapComments+"TABS2 [Pure] internal static RETURN_U MapT<ARGS_TU>(this TYPE self, Func<T, U> mapper) => self.Map(mapper);",
            "",
            mapComments+"TABS2 [Pure] public static RETURN_U MapT<ARGS_TU>(this TYPE self, Func<T, U> mapper) => self.MapT(x => x.MapT(mapper));",
            mapComments+"TABS2 [Pure] public static RETURN_U mapT<ARGS_TU>(TYPE self, Func<T, U> mapper) => self.MapT(x => x.MapT(mapper));"),
        //
        // Lift
        //
        Tuple.Create(
            liftComments+"TABS2 [Pure] public static T Lift<ARGS_T>(this TYPE self LIFT_ARGS) where T : struct => self.InnerValue()LIFT_INVOKE_ONE;",
            "",
            liftComments+"TABS2 [Pure] public static LIFT_RETURN_T LiftT<ARGS_T>(this TYPE self LIFT_ARGS) where T : struct => self.ValueT()LIFT_INVOKE_ONE;",
            liftComments+"TABS2 [Pure] public static LIFT_RETURN_T liftT<ARGS_T>(TYPE self LIFT_ARGS)  where T : struct => self.ValueT()LIFT_INVOKE_ONE;"),
        //
        // LiftUnsafe
        //
        Tuple.Create(
            liftUnsafeComments+"TABS2 [Pure] public static T LiftUnsafe<ARGS_T>(this TYPE self LIFT_ARGS) where T : class => self.InnerValue()LIFT_INVOKE_ONE;",
            "",
            liftUnsafeComments+"TABS2 [Pure] public static LIFT_RETURN_T LiftUnsafeT<ARGS_T>(this TYPE self LIFT_ARGS) where T : class => self.ValueT()LIFT_INVOKE_ONE;",
            liftUnsafeComments+"TABS2 [Pure] public static LIFT_RETURN_T LiftUnsafeT<ARGS_T>(TYPE self LIFT_ARGS)  where T : class => self.ValueT()LIFT_INVOKE_ONE;"),
        //
        // SelectMany
        //
        Tuple.Create(
            "",
            selectManyComments+"TABS2 [Pure] [EditorBrowsable(EditorBrowsableState.Never)] public static RETURN_V SelectMany<ARGS_TUV>(this OUTER_T self, Func<T, INNER_U> bind, Func<T, U, V> project) => self.Map(t => bind(t).Map(u => project(t, u)));",
            "",
            ""//selectManyComments+"TABS2 [Pure] [EditorBrowsable(EditorBrowsableState.Never)] public static RETURN_V SelectMany<ARGS_TUV>(this TYPE self, Func<T, INNER_U> bind, Func<T, U, V> project) => self.MapT(wt => wt.Bind(t => bind(t).Map(u => project(t, u))));"
            ),
};

   var linqFuncs = new [] {
        //
        // Select
        //
        Tuple.Create(
            selectComments+"TABS2 [Pure] [EditorBrowsable(EditorBrowsableState.Never)] internal static RETURN_U Select<ARGS_TU>(this TYPE self, Func<T, U> mapper) => self.Map(mapper);",
            selectComments+"TABS2 [Pure] [EditorBrowsable(EditorBrowsableState.Never)] public static RETURN_U Select<ARGS_TU>(this TYPE self, Func<T, U> mapper) => self.MapT(x => x.MapT(mapper));"),
        //
        // Where
        //
        Tuple.Create(
            whereComments+"TABS2 [Pure] [EditorBrowsable(EditorBrowsableState.Never)] internal static RETURN_T Where<ARGS_T>(this TYPE self, Func<T, bool> pred) => self.Filter(pred);",
            whereComments+"TABS2 [Pure] [EditorBrowsable(EditorBrowsableState.Never)] public static RETURN_T Where<ARGS_T>(this TYPE self, Func<T, bool> pred) => self.MapT(x => x.FilterT(pred));"),
        //
        // SelectMany
        //
        Tuple.Create(
            selectManyComments+"TABS2 [Pure] [EditorBrowsable(EditorBrowsableState.Never)] internal static RETURN_V SelectMany<ARGS_TUV>(this TYPE self, Func<T, U> bind, Func<T,U,V> project) => self.MapT(t => project(t, bind(t)));",
            selectManyComments+"TABS2 [Pure] [EditorBrowsable(EditorBrowsableState.Never)] public static RETURN_V SelectMany<ARGS_TUV>(this TYPE self, Func<T, U> bind, Func<T,U,V> project) => self.MapT(x => x.SelectMany(bind,project));"
            ),
   };
#>
using System; 
using System.Collections.Generic;
using System.Collections;
using System.Threading.Tasks;
using System.Linq;
using System.ComponentModel;
using LanguageExt;
using static LanguageExt.Prelude;
using LanguageExt.Trans;
using LanguageExt.Trans.Linq;
using System.Diagnostics.Contracts;

namespace LanguageExt
{
<#= GenerateOuterFuncs("TYPE", monadFuncs.Select(f => f.Item2).Where(f => f != ""), types, 2, true) #>
<#= GenerateOuterFuncs("TYPE", monadFuncs.Select(f => f.Item4).Where(f => f != ""), types, 2, false) #>
}

namespace LanguageExt.Trans
{
<#= GenerateInnerFuncs("TYPEMonad", monadFuncs.Select( f => f.Item1).Where(f => f != ""), types, 2) #>
<#= GenerateOuterFuncs("TYPETMonad", monadFuncs.Select(f => f.Item3).Where(f => f != ""), types, 2, false) #>

    namespace Linq
    {
<#= GenerateInnerFuncs("TYPEMonad", linqFuncs.Select( f => f.Item1).Where(f => f != ""), types, 3) #>
<#= GenerateOuterFuncs("TYPETMonad", linqFuncs.Select(f => f.Item2).Where(f => f != ""), types, 3, false) #>
    }
}

<#+

    public class TypeDesc
    {
        public readonly string Name;
        public readonly string Args;
        public readonly string Value;
        public readonly string TypeAlias;
        public readonly DelType DelType;

        public TypeDesc(string name, string args, string value, DelType delType, string typeAlias = null)
        {
            Name = name;
            Args = args;
            Value = value;
            DelType = delType;
            TypeAlias = typeAlias ?? Name;
        }
    }

    public TypeDesc T(string name, string args, string value, DelType delType, string typeAlias = null)
    {
        return new TypeDesc(name,args,value,delType,typeAlias);
    }

    public string GenerateInnerFuncs(string ns, IEnumerable<string> funcs, IEnumerable<TypeDesc> types, int tabs)
    {
        Func<TypeDesc, string> pre  = type => Tabs(
            Summary("", 1)+ "TABS1 public static partial class "+ns.Replace("TYPE",type.TypeAlias) +" {"
            );

        Func<TypeDesc, string> post = type => Tabs("TABS1 }");
        Func<string,string,IEnumerable<string>,string> all = (a,b,c) => String.Join("\r\n",a,String.Join("\r\n", c),b);

        return String.Join("\r\n",
                   from type in types
                   select 
                       all(
                           pre(type),
                           post(type),
                           from func in funcs
                           select Tabs(GenerateInnerFunc(func,type))
                       )
                   );
    }

    public string GenerateOuterFuncs(string ns,IEnumerable<string> funcs, IEnumerable<TypeDesc> types, int tabs, bool filterSame)
    {
        Func<TypeDesc, string> pre  = type => Tabs(Summary("",1)+"TABS1 public static partial class "+ns.Replace("TYPE",type.TypeAlias) +"T {");
        Func<TypeDesc, string> post = type => Tabs("TABS1 }");
        Func<string,string,IEnumerable<string>,string> all = (a,b,c) => String.Join("\r\n",a,String.Join("\r\n", c),b);

        return String.Join("\r\n",
                   from outer in types
                   from inner in types
                   where !(outer.DelType >= 0 && inner.DelType >= 0 && outer.Args != inner.Args) &&
                         !(filterSame && outer.Name == inner.Name)
                   select 
                       all(
                           pre(outer),
                           post(outer),
                           from func in funcs
                           select Tabs(GenerateOuterFunc(func,outer,inner))
                       )
                   );
    }

    public string Space(string str, int tabs)
    {
        switch(tabs)
        {
            case 1: return "    "+str;
            case 2: return "        "+str;
            case 3: return "            "+str;
            case 4: return "                "+str;
            default: return "";
        }
    }

    public string Summary(string summary, int tabs = 2)
    {
        return "TABS"+tabs+" /// <summary>\r\nTABS"+tabs+" /// " + summary + "\r\nTABS"+tabs+" /// </summary>\r\n";
    }

    public string Tabs(string str)
    {
        return str.Replace("TABS1 ","    ")
                  .Replace("TABS2 ","        ")
                  .Replace("TABS2 ","            ")
                  .Replace("TABS3 ","                ")
                  .Replace("TABS4 ","                    ");
    }

    public string TypeArgsGen(TypeDesc type, string genericArg)
    {
        return type.Args.Replace("!T",genericArg);
    }

    public string TypeGen(TypeDesc type, string genericArg, string additionalGenericArg = "")
    {
        return String.Format("{0}<{1}{2}>", type.Name, TypeArgsGen(type,genericArg), additionalGenericArg);
    }

    public string TypeGen(TypeDesc outerType, TypeDesc innerType, string genericArg, string additionalGenericArg = "")
    {
        return String.Format("{0}<{1}{2}>", outerType.Name, TypeArgsGen(innerType,genericArg), additionalGenericArg);
    }

    public string TypeGenOne(TypeDesc type, string oneArg)
    {
        if( type.DelType >= 0 )
        {
            return String.Format("{0}<{1}>", type.Name, TypeArgsGen(type,oneArg));
        }
        else
        {
            return oneArg;
        }
    }

    public string TypeGenOne(TypeDesc outer, TypeDesc inner, string oneArg)
    {
        if( outer.DelType >= 0 )
        {
            return TypeGenOne(outer,TypeGenOne(inner,oneArg));
        }
        else if( inner.DelType >= 0 )
        {
            return TypeGenOne(inner,oneArg);
        }
        else
        {
            return oneArg;
        }
    }

    public string DelArgs(TypeDesc type)
    {
        switch(type.DelType)
        {
            case DelType.Func0: return " ()=>";
            case DelType.Func1: return " args =>";
            default: return "";
        }
    }

    public string LiftArgs(TypeDesc type)
    {
        switch(type.DelType)
        {
            case DelType.Func0: return "";
            case DelType.Func1: 
                var args = type.Args.Split(',').Select(x => x.Trim()).Where(x => x != "Out").ToArray();
                args =  args.Take(args.Count()-1).ToArray();
                if( args.Count() == 1)
                {
                    return ", "+type.Args.Split(',').First()+" liftArg";
                }
                else
                {
                    return ", Tuple<"+String.Join(",",args)+"> liftArg";
                }
            default: return "";
        }
    }

    public string LiftInvokeOne(TypeDesc type)
    {
        switch(type.DelType)
        {
            case DelType.Func0: return "().Value";
            case DelType.Func1: return "(liftArg).Value";
            default: return "";
        }
    }

    public string GenerateInnerFunc(string func, TypeDesc type)
    {
        var fqtype         = TypeGen(type,"T");
        var inttype        = TypeGen(type,"","int");
        var booltype       = TypeGen(type,"","bool");

        var returnSingleT    = TypeGenOne(type,"T");
        var returnSingleU    = TypeGenOne(type,"U");
        var returnSingleV    = TypeGenOne(type,"V");
        var returnSingleInt  = TypeGenOne(type,"int");
        var returnSingleBool = TypeGenOne(type,"bool");
        var returnSingleUnit = TypeGenOne(type,"Unit");
        
        var returnTypeT    = fqtype;
        var returnTypeU    = TypeGen(type,"U");
        var returnTypeV    = TypeGen(type,"V");
        var returnTypeInt  = TypeGen(type,"int");
        var returnTypeBool = TypeGen(type,"bool");

        var returnTypeEnumerableT    = TypeGen(type,"IEnumerable<T>");
        var returnTypeEnumerableU    = TypeGen(type,"IEnumerable<U>");
        var returnTypeEnumerableV    = TypeGen(type,"IEnumerable<V>");

        return func.Replace("TYPE_INT",inttype)
                   .Replace("TYPE_BOOL",booltype)
                   .Replace("TYPE",fqtype)
                   .Replace("CLASS", type.Name)
                   .Replace("RETURN_ENUMERABLE_T", returnTypeEnumerableT)
                   .Replace("RETURN_ENUMERABLE_U", returnTypeEnumerableU)
                   .Replace("RETURN_ENUMERABLE_V", returnTypeEnumerableV)
                   .Replace("RETURN_ONE_UNIT", returnSingleUnit)
                   .Replace("RETURN_ONE_T", returnSingleT)
                   .Replace("RETURN_ONE_U", returnSingleU)
                   .Replace("RETURN_ONE_V", returnSingleV)
                   .Replace("RETURN_ONE_INT", returnSingleInt)
                   .Replace("RETURN_ONE_BOOL", returnSingleBool)
                   .Replace("RETURN_T",returnTypeT)
                   .Replace("RETURN_U", returnTypeU)
                   .Replace("RETURN_V", returnTypeV)
                   .Replace("RETURN_INT", returnTypeInt)
                   .Replace("RETURN_BOOL", returnTypeBool)
                   .Replace("ARGS_TUV", type.Args.Replace("!T","T") + ", U, V")
                   .Replace("ARGS_TU", type.Args.Replace("!T","T") + ", U")
                   .Replace("ARGS_T", type.Args.Replace("!T","T"))
                   .Replace("ARGS_INT", type.Args.Replace(", !T","").Replace("!T",""))
                   .Replace("ARGS_BOOL", type.Args.Replace(", !T","").Replace("!T",""))
                   .Replace("VALUE",type.Value)
                   .Replace("LIFT_ARGS", LiftArgs(type) )
                   .Replace("LIFT_INVOKE_ONE", LiftInvokeOne(type))
                   .Replace("DEL_ARGS", DelArgs(type) )
                   .Replace("DEL_INVOKE_ONE", DelInvokeOne(type))
                   .Replace("DEL_INVOKE", DelInvoke(type))
                   .Replace("<>","");
    }

    public string DelInvoke(TypeDesc type)
    {
        switch(type.DelType)
        {
            case DelType.Func0: return "()";
            case DelType.Func1: return "(args)";
            default: return "";
        }
    }
    
    public string DelInvokeOne(TypeDesc type)
    {
        switch(type.DelType)
        {
            case DelType.Func0: return "().Value";
            case DelType.Func1: return "(args).Value";
            default: return "";
        }
    }

    public string GenerateOuterFunc(
        string func, 
        TypeDesc outerType, 
        TypeDesc innerType
        )
    {
		//bool sm = func.Contains("SelectMany") || func.Contains("Select");
		//if(func=="Filter" && outerType.Name == "Map" && innerType.Name == "Map") return "";
		//if(sm && innerType.Name == outerType.Name) return "";
		//if(sm && innerType.Name == "IEnumerable" && outerType.Name != "IEnumerable") return "";
		//if(sm && innerType.Name != "IEnumerable" && outerType.Name == "IEnumerable") return "";
		//if(sm && innerType.Name == "Lst" && outerType.Name != "Lst") return "";
		//if(sm && innerType.Name != "Lst" && outerType.Name == "Lst") return "";

        var args = String.Join(", ", (outerType.Args + "," + innerType.Args).Split(',').Select(x => x.Trim()).Distinct());

        var innerTypeT     = TypeGen(innerType,"T");
        var innerTypeU     = TypeGen(innerType,"U");
        var innerTypeV     = TypeGen(innerType,"V");
        var innerTypeInt   = TypeGen(innerType,"int");
        var innerTypeBool  = TypeGen(innerType,"bool");

        var innerOneT     = TypeGenOne(innerType,"T");
        var innerOneU     = TypeGenOne(innerType,"U");
        var innerOneV     = TypeGenOne(innerType,"V");
        var innerOneInt   = TypeGenOne(innerType,"int");
        var innerOneBool  = TypeGenOne(innerType,"bool");

        var outerTypeT     = TypeGen(outerType,innerType,"T");
        var outerTypeU     = TypeGen(outerType,innerType,"U");
        var outerTypeV     = TypeGen(outerType,innerType,"V");
        var outerTypeInt   = TypeGen(outerType,innerType,"int");
        var outerTypeBool  = TypeGen(outerType,innerType,"bool");

        var returnTypeEnumerableT    = TypeGen(outerType,"IEnumerable<T>");
        var returnTypeEnumerableU    = TypeGen(outerType,"IEnumerable<U>");
        var returnTypeEnumerableV    = TypeGen(outerType,"IEnumerable<V>");

        var outerT     = TypeGen(outerType,"T");
        var outerU     = TypeGen(outerType,"U");
        var outerV     = TypeGen(outerType,"V");
        var outerInt   = TypeGen(outerType,"int");
        var outerBool  = TypeGen(outerType,"bool");

        var fqtype   = TypeGen(outerType,innerTypeT);
        var inttype  = TypeGen(outerType,innerTypeInt);
        var booltype = TypeGen(outerType,innerTypeBool);

        var returnSingleT    = TypeGenOne(outerType,innerType,"T");
        var returnSingleU    = TypeGenOne(outerType,innerType,"U");
        var returnSingleV    = TypeGenOne(outerType,innerType,"V");
        var returnSingleInt  = TypeGenOne(outerType,innerType,"int");
        var returnSingleBool = TypeGenOne(outerType,innerType,"bool");
        var returnSingleUnit = TypeGenOne(outerType,innerType,"Unit");

        var liftReturnT    = TypeGenOne(innerType,"T");

        var returnTypeT    = TypeGen(outerType,innerTypeT);
        var returnTypeU    = TypeGen(outerType,innerTypeU);
        var returnTypeV    = TypeGen(outerType,innerTypeV);
        var returnTypeInt  = TypeGen(outerType,innerTypeInt);
        var returnTypeBool = TypeGen(outerType,innerTypeBool);

        return func.Replace("TYPE_INT",inttype)
                   .Replace("TYPE_BOOL",booltype)
                   .Replace("TYPE",fqtype)
                   .Replace("LIFT_RETURN_T", liftReturnT)
                   .Replace("RETURN_ONE_UNIT", returnSingleUnit)
                   .Replace("RETURN_ONE_T", returnSingleT)
                   .Replace("RETURN_ONE_U", returnSingleU)
                   .Replace("RETURN_ONE_V", returnSingleV)
                   .Replace("RETURN_ONE_INT", returnSingleInt)
                   .Replace("RETURN_ONE_BOOL", returnSingleBool)
                   .Replace("RETURN_ENUMERABLE_T", returnTypeEnumerableT)
                   .Replace("RETURN_ENUMERABLE_U", returnTypeEnumerableU)
                   .Replace("RETURN_ENUMERABLE_V", returnTypeEnumerableV)
                   .Replace("RETURN_T", returnTypeT)
                   .Replace("RETURN_U", returnTypeU)
                   .Replace("RETURN_V", returnTypeV)
                   .Replace("RETURN_INT", returnTypeInt)
                   .Replace("RETURN_BOOL", returnTypeBool)
                   .Replace("INNER_ONE_T", innerOneT)
                   .Replace("INNER_ONE_U", innerOneU)
                   .Replace("INNER_ONE_V", innerOneV)
                   .Replace("INNER_ONE_INT", innerOneInt)
                   .Replace("INNER_ONE_BOOL", innerOneBool)
                   .Replace("INNER_T", innerTypeT)
                   .Replace("INNER_U", innerTypeU)
                   .Replace("INNER_V", innerTypeV)
                   .Replace("INNER_INT", innerTypeInt)
                   .Replace("INNER_BOOL", innerTypeBool)
                   .Replace("OUTER_T", outerT)
                   .Replace("OUTER_U", outerU)
                   .Replace("OUTER_V", outerV)
                   .Replace("OUTER_INT", outerInt)
                   .Replace("OUTER_BOOL", outerBool)
                   .Replace("LIFT_ARGS", LiftArgs(outerType) )
                   .Replace("LIFT_INVOKE_ONE", LiftInvokeOne(outerType))
                   .Replace("ARGS_INT", args.Replace("!T, ","").Replace(", !T","").Replace("!T",""))
                   .Replace("ARGS_BOOL", args.Replace("!T, ","").Replace(", !T","").Replace("!T",""))
                   .Replace("ARGS_TUV", args.Replace("!T","T") + ", U, V")
                   .Replace("ARGS_TU", args.Replace("!T","T") + ", U")
                   .Replace("ARGS_T", args.Replace("!T","T"))
                   .Replace("DEL_ARGS", DelArgs(innerType))
                   .Replace("DEL_INVOKE_ONE", DelInvokeOne(innerType))
                   .Replace("DEL_INVOKE", DelInvoke(innerType))
                   .Replace("<>","");    
    }

    public enum DelType
    {
        Not    = -1,
        Func0  = 0,
        Func1  = 1
    };
#>

